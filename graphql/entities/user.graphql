extend type Query @guard {
    "Get the top 10 users"
    LeaderBoard: [Profile!] @field(resolver: "UserQuery@leaderboard")
    "Get a single conversation"
    Conversation(uuid: String! @eq): Conversation @first
    "Get messages for a particular conversations"
    ConversationMessages(conversation_id: String! @eq): [ConversationMessage!]
        @paginate
    SingleUser(uuid: String! @eq): User @first
    MyNotifications: [Notification!]!
        @field(resolver: "UserQuery@myNotifications")
    "Get transactions"
    GetTransactions(
        where: _ @whereConditions(columns: ["created_at"])
        orderBy: _ @orderBy(columns: ["created_at"])
        hasUser: _ @whereHasConditions(columns: ["uuid"])
    ): [Transaction!]! @paginate
}

# User mutations
extend type Mutation @guard {
    "Update authenticated user profile"
    UpdateProfile(
        username: String
        name: String
        photo_url: Upload
        bio: String
        school: String
        student_number: String
        year_of_enrollment: String
        type: String
        phone_number: String
        push_notification_enabled: Boolean
    ): Profile! @field(resolver: "UserMutator@updateProfile")
    "Start a new conversation"
    StartConversation(
        "An array of the uuid of the other users in the conversation"
        associated_users_uuid: [String!]
    ): Conversation! @field(resolver: "UserMutator@startConversation")
    "Joint an existing conversation"
    JoinConversation(
        conversation_uuid: String!
        "An array of the uuid of the new users to be added to the conversation"
        associated_users_uuid: [String!]
    ): Conversation! @field(resolver: "UserMutator@joinConversation")
    "Save a conversation message"
    SaveConversationMessage(
        "can be text, image, image_gallery"
        type: String!
        conversation_id: Int!
        content: String
        "For single image message, send the uploaded image url, for image_gallery message, send an stringified array of the uploaded images url"
        media: String!
    ): ConversationMessage!
        @field(resolver: "UserMutator@saveConversationMessage")
    MarkNotificationsAsRead(
        "An array of the uuid of the notifications to be marked as read"
        notification_uuids: [String!]!
    ): Boolean! @field(resolver: "UserMutator@markNotificationsAsRead")
}

extend type Subscription @guard {
    "Subscribe to user conversation messages"
    conversationMessageCreated(
        conversationList: [String!]!
    ): ConversationMessage
    "Subscribe to user conversation membership"
    conversationMembership(userUuid: String!): Conversation
}
